// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import '../product_detail_screen.dart';
// import 'package:card/card_Holders/tabs/saved_tab.dart';
// import 'package:card/card_Holders/tabs/specials_tab.dart';
// import 'package:card/card_Holders/widgets/offer_card.dart';

// import '../../Silver.dart';

// // üé® A clean, minimalist color palette
// const Color primaryColor = Color(
//   0xFF1B1B1B,
// ); // Dark for text and primary elements
// const Color secondaryColor = Color(0xFFF0F0F0); // Light gray for backgrounds
// const Color cardColor = Color(0xFFFFFFFF);
// const Color accentColor = Color(0xFFE57373); // A soft red for highlights
// const Color shadowColor = Color(0xFFE0E0E0); // Subtle shadow for depth

// // ‚úçÔ∏è Text styles for a modern look
// const TextStyle boldTextStyle = TextStyle(
//   fontWeight: FontWeight.bold,
//   fontSize: 16,
//   color: primaryColor,
// );

// const TextStyle subtitleTextStyle = TextStyle(fontSize: 12, color: Colors.grey);

// class CardholderDashboard extends StatefulWidget {
//   const CardholderDashboard({super.key});

//   @override
//   State<CardholderDashboard> createState() => _CardholderDashboardState();
// }

// class _CardholderDashboardState extends State<CardholderDashboard> {
//   final _auth = FirebaseAuth.instance;
//   final _firestore = FirebaseFirestore.instance;

//   String? cardholderName;
//   String? defaultPin;
//   String? cardholderPlace;
//   String? cardholderDistrict;

//   String activePin = "";
//   String _locationScope = "My Area"; // NEW default combines PIN|City|District
//   String _sortOption = ""; // no sort by default (tap chip to apply)

//   int _selectedIndex = 0;

//   // search + category filters
//   String _searchQuery = "";
//   String _selectedCategory = "All";

//   final TextEditingController _searchController = TextEditingController();

//   @override
//   void initState() {
//     super.initState();
//     _loadProfile();
//   }

//   Future<void> _loadProfile() async {
//     final uid = _auth.currentUser?.uid;
//     if (uid == null) return;

//     final profileSnap = await _firestore
//         .collection("card_holders")
//         .doc(uid)
//         .collection("details")
//         .doc("profile")
//         .get();

//     if (profileSnap.exists) {
//       final data = profileSnap.data()!;
//       setState(() {
//         cardholderName = data["name"] ?? "";
//         defaultPin = data["pin"]?.toString() ?? "";
//         cardholderPlace = data["place"]?.toString() ?? "";
//         cardholderDistrict = data["district"]?.toString() ?? "";
//         activePin = defaultPin ?? "";
//       });
//     }
//   }

//   // ---------------- Utils: Saved toggling ----------------
//   String _savedDocIdForPath(String offerDocPath) =>
//       offerDocPath.replaceAll("/", "__");

//   Stream<Set<String>> _savedOfferPathsStream() {
//     final uid = _auth.currentUser?.uid;
//     if (uid == null) return const Stream.empty();
//     return _firestore
//         .collection("card_holders")
//         .doc(uid)
//         .collection("saved_offers")
//         .snapshots()
//         .map(
//           (snap) => snap.docs
//               .map((d) => (d.data()["offerDocPath"] as String))
//               .toSet(),
//         );
//   }

//   Future<void> _toggleSaveForOffer(
//     String offerDocPath,
//     Map<String, dynamic> data,
//     bool currentlySaved,
//   ) async {
//     final uid = _auth.currentUser?.uid;
//     if (uid == null) return;
//     final savedRef = _firestore
//         .collection("card_holders")
//         .doc(uid)
//         .collection("saved_offers")
//         .doc(_savedDocIdForPath(offerDocPath));

//     if (currentlySaved) {
//       await savedRef.delete();
//     } else {
//       // store snapshot data for fast Saved tab load + the ref path
//       await savedRef.set({
//         "offerDocPath": offerDocPath,
//         "savedAt": FieldValue.serverTimestamp(),
//         "itemName": data["itemName"],
//         "description": data["description"],
//         "images": data["images"],
//         "mrp": data["mrp"],
//         "offerPrice": data["offerPrice"],
//         "category": data["category"],
//         "place": data["place"],
//         "district": data["district"],
//         "pinCodes": data["pinCodes"],
//         "clicks": data["clicks"],
//         "views": data["views"],
//         "offerEndDate": data["offerEndDate"],
//         "rating": data["rating"],
//       }, SetOptions(merge: true));
//     }
//   }

//   // ---------------- Header (Search + Location + Banner) ----------------
//   Widget _buildHeader() {
//     return Padding(
//       padding: const EdgeInsets.fromLTRB(16, 12, 16, 0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           // top row: avatar + name + location chip
//           Row(
//             children: [
//               CircleAvatar(
//                 backgroundColor: Colors.grey[300],
//                 child: const Icon(Icons.person, color: Colors.black87),
//               ),
//               const SizedBox(width: 10),
//               Expanded(
//                 child: Text(
//                   cardholderName ?? "User",
//                   style: const TextStyle(
//                     fontWeight: FontWeight.bold,
//                     fontSize: 16,
//                   ),
//                 ),
//               ),
//               // location chip with PIN
//               GestureDetector(
//                 onTap: () async {
//                   final newPin = await _showPinDialog();
//                   if (newPin != null && newPin.isNotEmpty) {
//                     setState(() => activePin = newPin);
//                   }
//                 },
//                 child: Container(
//                   padding: const EdgeInsets.symmetric(
//                     horizontal: 12,
//                     vertical: 6,
//                   ),
//                   decoration: BoxDecoration(
//                     color: Colors.grey[200],
//                     borderRadius: BorderRadius.circular(20),
//                   ),
//                   child: Row(
//                     children: [
//                       const Icon(
//                         Icons.location_on,
//                         size: 18,
//                         color: Colors.black87,
//                       ),
//                       const SizedBox(width: 4),
//                       Text(activePin.isNotEmpty ? activePin : "Set PIN"),
//                     ],
//                   ),
//                 ),
//               ),
//             ],
//           ),
//           const SizedBox(height: 12),

//           // Search bar------------------------------------
//           TextField(
//             controller: _searchController,
//             decoration: InputDecoration(
//               hintText: "Search products, categories, places...",
//               prefixIcon: const Icon(Icons.search),
//               filled: true,
//               fillColor: Colors.grey[200],
//               border: OutlineInputBorder(
//                 borderRadius: BorderRadius.circular(25),
//                 borderSide: BorderSide.none,
//               ),
//               suffixIcon: IconButton(
//                 icon: const Icon(Icons.tune),
//                 onPressed: _showLocationFilter,
//                 tooltip: "Location filter",
//               ),
//             ),
//             onChanged: (val) {
//               setState(() => _searchQuery = val.toLowerCase());
//             },
//           ),

//           const SizedBox(height: 14),

//           // Promo banner-----------------------------------------------
//           Container(
//             width: double.infinity,
//             padding: const EdgeInsets.all(16),
//             decoration: BoxDecoration(
//               gradient: const LinearGradient(
//                 colors: [Color(0xFFFFE0B2), Color(0xFFFFCC80)],
//                 begin: Alignment.topLeft,
//                 end: Alignment.bottomRight,
//               ),
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Row(
//               children: [
//                 const Expanded(
//                   child: Text(
//                     "Best Deals ‚Ä¢ Up to 80% OFF",
//                     style: TextStyle(fontWeight: FontWeight.w800, fontSize: 16),
//                   ),
//                 ),
//                 ElevatedButton(
//                   onPressed: () {
//                     setState(() => _selectedIndex = 2); // jump to Specials
//                   },
//                   style: ElevatedButton.styleFrom(
//                     backgroundColor: Colors.black87,
//                     foregroundColor: Colors.white,
//                     shape: RoundedRectangleBorder(
//                       borderRadius: BorderRadius.circular(24),
//                     ),
//                   ),
//                   child: const Text("Explore"),
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }

//   // Pin change dialog-------------------------------------------

//   Future<String?> _showPinDialog() async {
//     final controller = TextEditingController(text: activePin);
//     return showDialog<String>(
//       context: context,
//       builder: (context) => AlertDialog(
//         title: const Text("Enter Pincode"),
//         content: TextField(
//           controller: controller,
//           keyboardType: TextInputType.number,
//           decoration: const InputDecoration(hintText: "Pincode"),
//         ),
//         actions: [
//           TextButton(
//             onPressed: () => Navigator.pop(context, null),
//             child: const Text("Cancel"),
//           ),
//           ElevatedButton(
//             onPressed: () => Navigator.pop(context, controller.text.trim()),
//             child: const Text("Save"),
//           ),
//         ],
//       ),
//     );
//   }

//   // Location filter---------------------------------------------

//   void _showLocationFilter() {
//     showModalBottomSheet(
//       context: context,
//       builder: (context) {
//         final options = [
//           "My Area",
//           "My Pincode",
//           "My City",
//           "My District",
//           "All",
//         ];
//         return Column(
//           mainAxisSize: MainAxisSize.min,
//           children: options.map((opt) {
//             return ListTile(
//               title: Text(opt),
//               subtitle: opt == "My Area"
//                   ? const Text(
//                       "PIN or City or District",
//                       style: TextStyle(fontSize: 12),
//                     )
//                   : null,
//               trailing: _locationScope == opt
//                   ? const Icon(Icons.check, color: Colors.black)
//                   : null,
//               onTap: () {
//                 setState(() => _locationScope = opt);
//                 Navigator.pop(context);
//               },
//             );
//           }).toList(),
//         );
//       },
//     );
//   }

//   // ---------------- Category Row (like screenshot quick actions) ----------------

//   Widget _buildQuickActions() {
//     final items = [
//       {"icon": Icons.category, "label": "Category", "onTap": () {}},
//       {
//         "icon": Icons.local_offer,
//         "label": "Specials",
//         "onTap": () => setState(() => _selectedIndex = 2),
//       },
//       {
//         "icon": Icons.bookmark,
//         "label": "Saved",
//         "onTap": () => setState(() => _selectedIndex = 1),
//       },
//       {"icon": Icons.settings, "label": "Settings", "onTap": () {}},
//     ];

//     return SizedBox(
//       height: 92,
//       child: ListView.separated(
//         scrollDirection: Axis.horizontal,
//         padding: const EdgeInsets.symmetric(horizontal: 16),
//         itemCount: items.length,
//         separatorBuilder: (_, __) => const SizedBox(width: 16),
//         itemBuilder: (context, i) {
//           final it = items[i];
//           return InkWell(
//             onTap: it["onTap"] as void Function()?,
//             borderRadius: BorderRadius.circular(16),
//             child: Column(
//               children: [
//                 Container(
//                   width: 56,
//                   height: 56,
//                   decoration: BoxDecoration(
//                     color: Colors.grey[200],
//                     borderRadius: BorderRadius.circular(16),
//                   ),
//                   child: Icon(
//                     it["icon"] as IconData,
//                     size: 28,
//                     color: Colors.black87,
//                   ),
//                 ),
//                 const SizedBox(height: 8),
//                 Text(
//                   it["label"] as String,
//                   style: const TextStyle(
//                     fontSize: 12,
//                     fontWeight: FontWeight.w600,
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }

//   // ---------------- Sort Chips (emoji-only default; toggle; no default selected) ----------------
//   Widget _buildSortChips() {
//     final sorts = [
//       "Trending",
//       "Biggest Discount",
//       "Ending Soon",
//       "Most Popular",
//     ];
//     final Map<String, String> emojis = {
//       "Trending": "üî•",
//       "Biggest Discount": "üè∑Ô∏è",
//       "Ending Soon": "üïí",
//       "Most Popular": "‚≠ê",
//     };

//     return SizedBox(
//       height: 40,
//       child: ListView.separated(
//         scrollDirection: Axis.horizontal,
//         padding: const EdgeInsets.symmetric(horizontal: 16),
//         itemCount: sorts.length,
//         separatorBuilder: (_, __) => const SizedBox(width: 12),
//         itemBuilder: (context, index) {
//           final key = sorts[index];
//           final isSelected = _sortOption == key;
//           final label = isSelected ? "${emojis[key]} $key" : emojis[key]!;

//           return GestureDetector(
//             onTap: () {
//               setState(() {
//                 if (isSelected) {
//                   _sortOption = ""; // deselect -> normal offers (unsorted)
//                 } else {
//                   _sortOption = key;
//                 }
//               });
//             },
//             child: Container(
//               padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
//               decoration: BoxDecoration(
//                 color: isSelected ? Colors.deepOrange : Colors.transparent,
//                 borderRadius: BorderRadius.circular(20),
//               ),
//               child: Text(
//                 label,
//                 style: TextStyle(
//                   fontSize: 14,
//                   fontWeight: FontWeight.w600,
//                   color: isSelected ? Colors.white : Colors.black,
//                 ),
//               ),
//             ),
//           );
//         },
//       ),
//     );
//   }

//   // ---------------- Offers Grid ----------------
//   Widget _buildOffersGrid() {
//     return Expanded(
//       child: StreamBuilder<QuerySnapshot>(
//         stream: _firestore.collectionGroup("offers").snapshots(),
//         builder: (context, snapshot) {
//           if (snapshot.connectionState == ConnectionState.waiting) {
//             return const Center(child: CircularProgressIndicator());
//           }
//           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
//             return const Center(child: Text("No offers available"));
//           }

//           // all offers
//           final docs = snapshot.data!.docs;
//           final allOffers = docs
//               .map(
//                 (d) => {
//                   ...((d.data() as Map<String, dynamic>)),
//                   "_docPath": d.reference.path,
//                 },
//               )
//               .toList();

//           // filter
//           List<Map<String, dynamic>> filtered = allOffers.where((data) {
//             final name = (data["itemName"] ?? "").toString().toLowerCase();
//             final desc = (data["description"] ?? "").toString().toLowerCase();
//             final category = (data["category"] ?? "").toString().toLowerCase();
//             final offerPinList = List<String>.from(data["pinCodes"] ?? []);
//             final offerPlace = (data["place"] ?? "").toString().toLowerCase();
//             final offerDistrict = (data["district"] ?? "")
//                 .toString()
//                 .toLowerCase();

//             // search
//             if (_searchQuery.isNotEmpty &&
//                 !(name.contains(_searchQuery) ||
//                     desc.contains(_searchQuery) ||
//                     category.contains(_searchQuery))) {
//               return false;
//             }

//             // category
//             if (_selectedCategory != "All" &&
//                 category != _selectedCategory.toLowerCase()) {
//               return false;
//             }

//             bool match = true;
//             switch (_locationScope) {
//               case "My Pincode":
//                 match =
//                     activePin.isNotEmpty && offerPinList.contains(activePin);
//                 break;
//               case "My City":
//                 match =
//                     cardholderPlace != null &&
//                     offerPlace == cardholderPlace!.toLowerCase();
//                 break;
//               case "My District":
//                 match =
//                     cardholderDistrict != null &&
//                     offerDistrict == cardholderDistrict!.toLowerCase();
//                 break;
//               case "My Area":
//                 final byPin =
//                     activePin.isNotEmpty && offerPinList.contains(activePin);
//                 final byCity =
//                     cardholderPlace != null &&
//                     offerPlace == cardholderPlace!.toLowerCase();
//                 final byDistrict =
//                     cardholderDistrict != null &&
//                     offerDistrict == cardholderDistrict!.toLowerCase();
//                 match = byPin || byCity || byDistrict;
//                 break;
//               case "All":
//               default:
//                 match = true;
//             }
//             return match;
//           }).toList();

//           // fallback to all offers if no results (never blank)
//           final offers = filtered.isEmpty ? allOffers : filtered;

//           // sorting (apply only if a chip is selected)
//           if (_sortOption.isNotEmpty) {
//             offers.sort((a, b) {
//               double discountA = 0, discountB = 0;
//               double? mrpA = double.tryParse(a["mrp"]?.toString() ?? "");
//               double? offerA = double.tryParse(
//                 a["offerPrice"]?.toString() ?? "",
//               );
//               double? mrpB = double.tryParse(b["mrp"]?.toString() ?? "");
//               double? offerB = double.tryParse(
//                 b["offerPrice"]?.toString() ?? "",
//               );

//               if (mrpA != null && offerA != null && mrpA > 0) {
//                 discountA = ((mrpA - offerA) / mrpA) * 100;
//               }
//               if (mrpB != null && offerB != null && mrpB > 0) {
//                 discountB = ((mrpB - offerB) / mrpB) * 100;
//               }

//               switch (_sortOption) {
//                 case "Biggest Discount":
//                   return discountB.compareTo(discountA);
//                 case "Ending Soon":
//                   DateTime? endA = DateTime.tryParse(
//                     a["offerEndDate"]?.toString() ?? "",
//                   );
//                   DateTime? endB = DateTime.tryParse(
//                     b["offerEndDate"]?.toString() ?? "",
//                   );
//                   if (endA != null && endB != null) return endA.compareTo(endB);
//                   return 0;
//                 case "Most Popular":
//                   int viewsA = a["views"] ?? 0;
//                   int viewsB = b["views"] ?? 0;
//                   return viewsB.compareTo(viewsA);
//                 case "Trending":
//                   int clicksA = a["clicks"] ?? 0;
//                   int clicksB = b["clicks"] ?? 0;
//                   return clicksB.compareTo(clicksA);
//                 default:
//                   return 0;
//               }
//             });
//           }

//           // Saved overlay stream (to render heart filled/outline)
//           return StreamBuilder<Set<String>>(
//             stream: _savedOfferPathsStream(),
//             builder: (context, savedSnapshot) {
//               final savedPaths = savedSnapshot.data ?? <String>{};

//               return GridView.builder(
//                 padding: const EdgeInsets.all(16),
//                 gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
//                   crossAxisCount: 2,
//                   crossAxisSpacing: 12,
//                   mainAxisSpacing: 12,
//                   childAspectRatio: 0.68,
//                 ),
//                 itemCount: offers.length,
//                 itemBuilder: (context, index) {
//                   final data = offers[index];
//                   final docPath = data["_docPath"] as String;

//                   return OfferCard(
//                     data: data,
//                     saved: savedPaths.contains(docPath),
//                     onToggleSave: (currentlySaved) =>
//                         _toggleSaveForOffer(docPath, data, currentlySaved),
//                     onTap: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(
//                           builder: (_) => ProductDetailScreen(
//                             data: data,
//                             offerDocPath: docPath,
//                             initiallySaved: savedPaths.contains(docPath),
//                           ),
//                         ),
//                       );
//                     },
//                   );
//                 },
//               );
//             },
//           );
//         },
//       ),
//     );
//   }

//   // //---------------- Tabs ----------------

//   Widget _buildHomeTab() {
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         _buildHeader(),
//         const SizedBox(height: 12),
//         _buildQuickActions(),
//         const SizedBox(height: 8),
//         Padding(
//           padding: const EdgeInsets.symmetric(horizontal: 16),
//           child: Row(
//             children: const [
//               Text(
//                 "Best Sale Product",
//                 style: TextStyle(fontWeight: FontWeight.w800, fontSize: 16),
//               ),
//               Spacer(),
//               Text(
//                 "See more",
//                 style: TextStyle(fontWeight: FontWeight.w600, fontSize: 12),
//               ),
//             ],
//           ),
//         ),
//         const SizedBox(height: 8),
//         _buildSortChips(),
//         const SizedBox(height: 8),
//         _buildOffersGrid(),
//       ],
//     );
//   }

//   Widget _buildProfileTab() {
//     return const Center(child: Text("Profile Coming Soon"));
//   }

//   @override
//   Widget build(BuildContext context) {
//     late final Widget currentTab;
//     if (_selectedIndex == 0) {
//       currentTab = _buildHomeTab();
//     } else if (_selectedIndex == 1) {
//       currentTab = SavedTab(onToggleSave: _toggleSaveForOffer);
//       // currentTab = _buildSavedTab();
//     } else if (_selectedIndex == 2) {
//       // } else if (_selectedIndex == 2) {
//       currentTab = const SpecialsTab();
//       // currentTab = _buildSpecialsTab();
//     } else {
//       currentTab = _buildProfileTab();
//       // currentTab = MyHomeScreen();
//     }

//     return Scaffold(
//       body: SafeArea(child: currentTab),
//       bottomNavigationBar: BottomNavigationBar(
//         currentIndex: _selectedIndex,
//         selectedItemColor: const Color(0xFF1E212A),
//         unselectedItemColor: Colors.grey[600],
//         onTap: (i) => setState(() => _selectedIndex = i),
//         items: const [
//           BottomNavigationBarItem(icon: Icon(Icons.home), label: "Home"),
//           BottomNavigationBarItem(icon: Icon(Icons.bookmark), label: "Saved"),
//           BottomNavigationBarItem(
//             icon: Icon(Icons.local_offer),
//             label: "Specials",
//           ),
//           BottomNavigationBarItem(icon: Icon(Icons.person), label: "Profile"),
//         ],
//       ),
//     );
//   }
// }




//---------------------------------

// import 'package:flutter/material.dart';

// class QuickActions extends StatelessWidget {
//   const QuickActions({super.key});

//   @override
//   Widget build(BuildContext context) {
//     final items = [
//       {"icon": Icons.category, "label": "Category", "onTap": () {}},
//       {"icon": Icons.local_offer, "label": "Specials", "onTap": () {}},
//       {"icon": Icons.bookmark, "label": "Saved", "onTap": onSavedTap},
//       {"icon": Icons.settings, "label": "Settings", "onTap": () {}},
//     ];

//     return SizedBox(
//       height: 92,
//       child: ListView.separated(
//         scrollDirection: Axis.horizontal,
//         padding: const EdgeInsets.symmetric(horizontal: 16),
//         itemCount: items.length,
//         separatorBuilder: (_, __) => const SizedBox(width: 16),
//         itemBuilder: (context, i) {
//           final it = items[i];
//           return InkWell(
//             onTap: it["onTap"] as void Function()?,
//             borderRadius: BorderRadius.circular(16),
//             child: Column(
//               children: [
//                 Container(
//                   width: 56,
//                   height: 56,
//                   decoration: BoxDecoration(
//                     color: Colors.grey[200],
//                     borderRadius: BorderRadius.circular(16),
//                   ),
//                   child: Icon(
//                     it["icon"] as IconData,
//                     size: 28,
//                     color: Colors.black87,
//                   ),
//                 ),
//                 const SizedBox(height: 8),
//                 Text(
//                   it["label"] as String,
//                   style: const TextStyle(
//                     fontSize: 12,
//                     fontWeight: FontWeight.w600,
//                   ),
//                 ),
//               ],
//             ),
//           );
//         },
//       ),
//     );
//   }
// }
